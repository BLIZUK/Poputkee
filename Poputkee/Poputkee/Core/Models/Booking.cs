using System;

/*
|
| # Дополнительные рекомендации:
|  | 1. Добавить валидацию:
|  |------------------------------------------------------------------------|
|  | ```
|  |    public IEnumerable<ValidationResult> Validate()
|  |    {
|  |        if (TripId == Guid.Empty)
|  |            yield return new ValidationResult("Не указана поездка");
|  |   
|  |        if (PassengerId == Guid.Empty)
|  |            yield return new ValidationResult("Не указан пассажир");
|  |    }
|  | ```
|  |------------------------------------------------------------------------|
|  | 2. Реализовать историю изменений:
|  |------------------------------------------------------------------------|
|  | ```
|  |
|  |    public DateTime? ModifiedAt { get; set; }
|  |    public string ModifiedBy { get; set; }
|  |
|  | ```
|  |------------------------------------------------------------------------|
|  | 3. Добавить статус бронирования:
|  |------------------------------------------------------------------------|
|  | ```
|  |
|  |    public BookingStatus Status { get; set; } = BookingStatus.Pending;
|  |
|  | ```
|  |------------------------------------------------------------------------|
|  | 4. Реализовать мягкое удаление:
|  |------------------------------------------------------------------------|
|  | ```
|  |
|  |    public bool IsDeleted { get; set; }
|  |
|  | ```
|  |------------------------------------------------------------------------|
|
*/

namespace Poputkee.Core.Models
{
    /// <summary>
    /// Класс, представляющий бронирование поездки
    /// </summary>
    public class Booking
    {
        #region Core Properties

        /// <summary>
        /// Уникальный идентификатор бронирования
        /// </summary>
        public Guid Id { get; set; } = Guid.NewGuid();

        /// <summary>
        /// Дата и время создания бронирования (в UTC)
        /// </summary>
        public DateTime BookedAt { get; set; } = DateTime.UtcNow;

        #endregion

        #region Foreign Keys

        /// <summary>
        /// Идентификатор связанной поездки
        /// </summary>
        public Guid TripId { get; set; }

        /// <summary>
        /// Идентификатор пассажира
        /// </summary>
        public Guid PassengerId { get; set; }

        #endregion

        #region Navigation Properties

        /// <summary>
        /// Навигационное свойство для связанной поездки
        /// </summary>
        public Trip Trip { get; set; } = new Trip();

        /*
        |------------------------------------------------------------------------------------------------------------------------> VARIANT 
        |* # public Trip Trip { get; set; } = new Trip();  ЕСЛИ ПОСТАВИТЬ МОДИФИКАТОР <required>
        |------------------------------------------------------------------------------------------------------------------------> EROR        
        |* Необходимо задать обязательный элемент "Trip.FromCity" в инициализаторе объектов или в конструкторе атрибутов.
        |* Необходимо задать обязательный элемент "Trip.ToCity" в инициализаторе объектов или в конструкторе атрибутов.
        |* Необходимо задать обязательный элемент "Trip.DriverName" в инициализаторе объектов или в конструкторе атрибутов.
        |* Необходимо задать обязательный элемент "Trip.Comment" в инициализаторе объектов или в конструкторе атрибутов.
        |------------------------------------------------------------------------------------------------------------------------> EROR  
        */

        /// <summary>
        /// Навигационное свойство для пассажира
        /// </summary>
        public User Passenger { get; set; } = new User();

        #endregion
    }
}